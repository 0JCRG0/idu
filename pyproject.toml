[project]
name = "idu"
version = "0.1.0"
description = "API that extracts structured information from unstructured documents."
readme = "README.md"
authors = [{ name = "Juan Carlos Reyes Garcia", email = "juancarlosrg1999@gmail.com" }]
requires-python = ">=3.12"
dependencies = [
    "ell-ai>=0.0.17",
    "fastapi>=0.115.14",
    "pytesseract>=0.3.13",
    "pytest>=8.4.1",
    "python-dotenv>=1.1.1",
    "tenacity>=9.1.2",
]

[dependency-groups]
dev = [
    "ipykernel>=6.29.5",
    "kagglehub>=0.3.12",
]
lint = [
    "ruff>=0.12.2",
]

[tool.hatch.build.targets.sdist]
include = ["src"]

[tool.hatch.build.targets.wheel]
include = ["src"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    ".pytest_cache",
]

# Same as Black.
line-length = 120

# Assume Python 3.12.
target-version = "py312"

# Format Jupyter notebooks
extend-include = ["*.ipynb"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
extend-select = ["D", "E", "F", "I", "UP"]

extend-ignore = [
    "D100",
    "D104",
    "D107",
    "D203",
    "D212",
    "D213",
    "D401",
    "D402",
    "D413",
    "D415",
    "D416",
    "D417",
    "E71",
    "E226",
    "E302",
    "E731",
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.pycodestyle]
max-line-length = 120
ignore-overlong-task-comments = true

[tool.isort]
known_first_party = 'docformatter'
known_third_party = ['toml']
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120

[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
| \.hg
| \.mypy_cache
| \.tox
| \.venv
| _build
| buck-out
| build
| \.pytest_cache
)/
'''
